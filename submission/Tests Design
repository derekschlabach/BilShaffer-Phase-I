Derek Schlabach & Max Terman
Test Designs

BC Test Design:

	Single Point
		Create a BC (must create prior a varfactor, and fieldVar), add a Single Point Constraint
			save values for Vertex, FieldID, Value
		Test functions against saved values
			bcsImposed
			singlePointBC
			valueForSinglePointBC
			vertexForSinglePointBC
		
	
	Zero Mean Constraint
		Create a BC (must create prior a varfactor, and fieldVar), add a Zero Mean Constraint
			no need to save values (outside of the ID)
		Test addZeroMeanConstraint and imposeZeroMeanConstraint to see if they are added
		Test removeZeroMeanConstraint using imposeZeroMeanConstraint to see if it is removed


	Dirichlet
		Create a BC (must create prior a varfactor, and fieldVar), add a Dirichlet Constraint
			save values for SpatialFilter & Function (Function.Function.xn())
		Test functions to see if the dirichlet is added with the correct values
			getDirchletBC
			getSpatiallyFilteredFunctionFunctionForDirichlet

------------------------------------------------------------------------------------------

Mesh/MeshFactory Test Design:

	Normal Mesh Tests
		Create a BF from a Poisson Formulation
		Create a Mesh
			save values for # of cells & h1Order
		Test functions against saved values
			cellPolyOrder
			numElements
			numActiveElements
			getActiveCellIDs - create a tuple using a loop from number of elements
			getDimenions - should equal 2
			save PolyOrder
		pRefine and hRefine
			recheck polyOrder, numElements, and numActiveElements with updated values
		Save the Mesh to HDF5
		Reload the HDF5 to a new variable
			loadFromHDF5
		Load a triangle mesh to a new variable
			Use downloaded A.1.poly
	
	
	Vertices Mesh Tests
		Create a BF from a Poisson Formulation
		Create a Mesh
		Check values initially using print
			in actual test make sure those tests check out once more (for vertices)
				vertexIndicesForCell
				verticesForCell
