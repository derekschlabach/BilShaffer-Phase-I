# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HDF5Exporter', [dirname(__file__)])
        except ImportError:
            import _HDF5Exporter
            return _HDF5Exporter
        if fp is not None:
            try:
                _mod = imp.load_module('_HDF5Exporter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HDF5Exporter = swig_import_helper()
    del swig_import_helper
else:
    import _HDF5Exporter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HDF5Exporter.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _HDF5Exporter.SwigPyIterator_value(self)
    def incr(self, n=1): return _HDF5Exporter.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _HDF5Exporter.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _HDF5Exporter.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _HDF5Exporter.SwigPyIterator_equal(self, *args)
    def copy(self): return _HDF5Exporter.SwigPyIterator_copy(self)
    def next(self): return _HDF5Exporter.SwigPyIterator_next(self)
    def __next__(self): return _HDF5Exporter.SwigPyIterator___next__(self)
    def previous(self): return _HDF5Exporter.SwigPyIterator_previous(self)
    def advance(self, *args): return _HDF5Exporter.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _HDF5Exporter.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _HDF5Exporter.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _HDF5Exporter.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _HDF5Exporter.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _HDF5Exporter.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _HDF5Exporter.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _HDF5Exporter.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SetInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _HDF5Exporter.SetInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _HDF5Exporter.SetInt___nonzero__(self)
    def __bool__(self): return _HDF5Exporter.SetInt___bool__(self)
    def __len__(self): return _HDF5Exporter.SetInt___len__(self)
    def append(self, *args): return _HDF5Exporter.SetInt_append(self, *args)
    def __contains__(self, *args): return _HDF5Exporter.SetInt___contains__(self, *args)
    def __getitem__(self, *args): return _HDF5Exporter.SetInt___getitem__(self, *args)
    def add(self, *args): return _HDF5Exporter.SetInt_add(self, *args)
    def discard(self, *args): return _HDF5Exporter.SetInt_discard(self, *args)
    def __init__(self, *args): 
        this = _HDF5Exporter.new_SetInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _HDF5Exporter.SetInt_empty(self)
    def size(self): return _HDF5Exporter.SetInt_size(self)
    def clear(self): return _HDF5Exporter.SetInt_clear(self)
    def swap(self, *args): return _HDF5Exporter.SetInt_swap(self, *args)
    def count(self, *args): return _HDF5Exporter.SetInt_count(self, *args)
    def begin(self): return _HDF5Exporter.SetInt_begin(self)
    def end(self): return _HDF5Exporter.SetInt_end(self)
    def rbegin(self): return _HDF5Exporter.SetInt_rbegin(self)
    def rend(self): return _HDF5Exporter.SetInt_rend(self)
    def erase(self, *args): return _HDF5Exporter.SetInt_erase(self, *args)
    def find(self, *args): return _HDF5Exporter.SetInt_find(self, *args)
    def lower_bound(self, *args): return _HDF5Exporter.SetInt_lower_bound(self, *args)
    def upper_bound(self, *args): return _HDF5Exporter.SetInt_upper_bound(self, *args)
    def equal_range(self, *args): return _HDF5Exporter.SetInt_equal_range(self, *args)
    def insert(self, *args): return _HDF5Exporter.SetInt_insert(self, *args)
    __swig_destroy__ = _HDF5Exporter.delete_SetInt
    __del__ = lambda self : None;
SetInt_swigregister = _HDF5Exporter.SetInt_swigregister
SetInt_swigregister(SetInt)

class MapIntToFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapIntToFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapIntToFunction, name)
    __repr__ = _swig_repr
    def iterator(self): return _HDF5Exporter.MapIntToFunction_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _HDF5Exporter.MapIntToFunction___nonzero__(self)
    def __bool__(self): return _HDF5Exporter.MapIntToFunction___bool__(self)
    def __len__(self): return _HDF5Exporter.MapIntToFunction___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _HDF5Exporter.MapIntToFunction___getitem__(self, *args)
    def __delitem__(self, *args): return _HDF5Exporter.MapIntToFunction___delitem__(self, *args)
    def has_key(self, *args): return _HDF5Exporter.MapIntToFunction_has_key(self, *args)
    def keys(self): return _HDF5Exporter.MapIntToFunction_keys(self)
    def values(self): return _HDF5Exporter.MapIntToFunction_values(self)
    def items(self): return _HDF5Exporter.MapIntToFunction_items(self)
    def __contains__(self, *args): return _HDF5Exporter.MapIntToFunction___contains__(self, *args)
    def key_iterator(self): return _HDF5Exporter.MapIntToFunction_key_iterator(self)
    def value_iterator(self): return _HDF5Exporter.MapIntToFunction_value_iterator(self)
    def __setitem__(self, *args): return _HDF5Exporter.MapIntToFunction___setitem__(self, *args)
    def asdict(self): return _HDF5Exporter.MapIntToFunction_asdict(self)
    def __init__(self, *args): 
        this = _HDF5Exporter.new_MapIntToFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _HDF5Exporter.MapIntToFunction_empty(self)
    def size(self): return _HDF5Exporter.MapIntToFunction_size(self)
    def clear(self): return _HDF5Exporter.MapIntToFunction_clear(self)
    def swap(self, *args): return _HDF5Exporter.MapIntToFunction_swap(self, *args)
    def get_allocator(self): return _HDF5Exporter.MapIntToFunction_get_allocator(self)
    def begin(self): return _HDF5Exporter.MapIntToFunction_begin(self)
    def end(self): return _HDF5Exporter.MapIntToFunction_end(self)
    def rbegin(self): return _HDF5Exporter.MapIntToFunction_rbegin(self)
    def rend(self): return _HDF5Exporter.MapIntToFunction_rend(self)
    def count(self, *args): return _HDF5Exporter.MapIntToFunction_count(self, *args)
    def erase(self, *args): return _HDF5Exporter.MapIntToFunction_erase(self, *args)
    def find(self, *args): return _HDF5Exporter.MapIntToFunction_find(self, *args)
    def lower_bound(self, *args): return _HDF5Exporter.MapIntToFunction_lower_bound(self, *args)
    def upper_bound(self, *args): return _HDF5Exporter.MapIntToFunction_upper_bound(self, *args)
    __swig_destroy__ = _HDF5Exporter.delete_MapIntToFunction
    __del__ = lambda self : None;
MapIntToFunction_swigregister = _HDF5Exporter.MapIntToFunction_swigregister
MapIntToFunction_swigregister(MapIntToFunction)

class Solution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HDF5Exporter.new_Solution(*args)
        try: self.this.append(this)
        except: self.this = this
    def solve(self): return _HDF5Exporter.Solution_solve(self)
    def addSolution(self, *args): return _HDF5Exporter.Solution_addSolution(self, *args)
    def clear(self): return _HDF5Exporter.Solution_clear(self)
    def cubatureEnrichmentDegree(self): return _HDF5Exporter.Solution_cubatureEnrichmentDegree(self)
    def setCubatureEnrichmentDegree(self, *args): return _HDF5Exporter.Solution_setCubatureEnrichmentDegree(self, *args)
    def L2NormOfSolution(self, *args): return _HDF5Exporter.Solution_L2NormOfSolution(self, *args)
    def projectOntoMesh(self, *args): return _HDF5Exporter.Solution_projectOntoMesh(self, *args)
    def energyErrorTotal(self): return _HDF5Exporter.Solution_energyErrorTotal(self)
    def setWriteMatrixToFile(self, *args): return _HDF5Exporter.Solution_setWriteMatrixToFile(self, *args)
    def setWriteMatrixToMatrixMarketFile(self, *args): return _HDF5Exporter.Solution_setWriteMatrixToMatrixMarketFile(self, *args)
    def setWriteRHSToMatrixMarketFile(self, *args): return _HDF5Exporter.Solution_setWriteRHSToMatrixMarketFile(self, *args)
    def mesh(self): return _HDF5Exporter.Solution_mesh(self)
    def bc(self): return _HDF5Exporter.Solution_bc(self)
    def rhs(self): return _HDF5Exporter.Solution_rhs(self)
    def ip(self): return _HDF5Exporter.Solution_ip(self)
    def setBC(self, *args): return _HDF5Exporter.Solution_setBC(self, *args)
    def setRHS(self, *args): return _HDF5Exporter.Solution_setRHS(self, *args)
    def setIP(self, *args): return _HDF5Exporter.Solution_setIP(self, *args)
    def save(self, *args): return _HDF5Exporter.Solution_save(self, *args)
    __swig_getmethods__["load"] = lambda x: _HDF5Exporter.Solution_load
    if _newclass:load = staticmethod(_HDF5Exporter.Solution_load)
    def saveToHDF5(self, *args): return _HDF5Exporter.Solution_saveToHDF5(self, *args)
    def loadFromHDF5(self, *args): return _HDF5Exporter.Solution_loadFromHDF5(self, *args)
    def setUseCondensedSolve(self, *args): return _HDF5Exporter.Solution_setUseCondensedSolve(self, *args)
    __swig_getmethods__["solution"] = lambda x: _HDF5Exporter.Solution_solution
    if _newclass:solution = staticmethod(_HDF5Exporter.Solution_solution)
    __swig_destroy__ = _HDF5Exporter.delete_Solution
    __del__ = lambda self : None;
Solution_swigregister = _HDF5Exporter.Solution_swigregister
Solution_swigregister(Solution)

def Solution_load(*args):
  return _HDF5Exporter.Solution_load(*args)
Solution_load = _HDF5Exporter.Solution_load

def Solution_solution(*args):
  return _HDF5Exporter.Solution_solution(*args)
Solution_solution = _HDF5Exporter.Solution_solution

class SolutionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolutionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolutionPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _HDF5Exporter.SolutionPtr___deref__(self)
    def __init__(self): 
        this = _HDF5Exporter.new_SolutionPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HDF5Exporter.delete_SolutionPtr
    __del__ = lambda self : None;
    def solve(self): return _HDF5Exporter.SolutionPtr_solve(self)
    def addSolution(self, *args): return _HDF5Exporter.SolutionPtr_addSolution(self, *args)
    def clear(self): return _HDF5Exporter.SolutionPtr_clear(self)
    def cubatureEnrichmentDegree(self): return _HDF5Exporter.SolutionPtr_cubatureEnrichmentDegree(self)
    def setCubatureEnrichmentDegree(self, *args): return _HDF5Exporter.SolutionPtr_setCubatureEnrichmentDegree(self, *args)
    def L2NormOfSolution(self, *args): return _HDF5Exporter.SolutionPtr_L2NormOfSolution(self, *args)
    def projectOntoMesh(self, *args): return _HDF5Exporter.SolutionPtr_projectOntoMesh(self, *args)
    def energyErrorTotal(self): return _HDF5Exporter.SolutionPtr_energyErrorTotal(self)
    def setWriteMatrixToFile(self, *args): return _HDF5Exporter.SolutionPtr_setWriteMatrixToFile(self, *args)
    def setWriteMatrixToMatrixMarketFile(self, *args): return _HDF5Exporter.SolutionPtr_setWriteMatrixToMatrixMarketFile(self, *args)
    def setWriteRHSToMatrixMarketFile(self, *args): return _HDF5Exporter.SolutionPtr_setWriteRHSToMatrixMarketFile(self, *args)
    def mesh(self): return _HDF5Exporter.SolutionPtr_mesh(self)
    def bc(self): return _HDF5Exporter.SolutionPtr_bc(self)
    def rhs(self): return _HDF5Exporter.SolutionPtr_rhs(self)
    def ip(self): return _HDF5Exporter.SolutionPtr_ip(self)
    def setBC(self, *args): return _HDF5Exporter.SolutionPtr_setBC(self, *args)
    def setRHS(self, *args): return _HDF5Exporter.SolutionPtr_setRHS(self, *args)
    def setIP(self, *args): return _HDF5Exporter.SolutionPtr_setIP(self, *args)
    def save(self, *args): return _HDF5Exporter.SolutionPtr_save(self, *args)
    def load(self, *args): return _HDF5Exporter.SolutionPtr_load(self, *args)
    def saveToHDF5(self, *args): return _HDF5Exporter.SolutionPtr_saveToHDF5(self, *args)
    def loadFromHDF5(self, *args): return _HDF5Exporter.SolutionPtr_loadFromHDF5(self, *args)
    def setUseCondensedSolve(self, *args): return _HDF5Exporter.SolutionPtr_setUseCondensedSolve(self, *args)
    def solution(self, *args): return _HDF5Exporter.SolutionPtr_solution(self, *args)
SolutionPtr_swigregister = _HDF5Exporter.SolutionPtr_swigregister
SolutionPtr_swigregister(SolutionPtr)

class FunctionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _HDF5Exporter.FunctionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _HDF5Exporter.FunctionVector___nonzero__(self)
    def __bool__(self): return _HDF5Exporter.FunctionVector___bool__(self)
    def __len__(self): return _HDF5Exporter.FunctionVector___len__(self)
    def pop(self): return _HDF5Exporter.FunctionVector_pop(self)
    def __getslice__(self, *args): return _HDF5Exporter.FunctionVector___getslice__(self, *args)
    def __setslice__(self, *args): return _HDF5Exporter.FunctionVector___setslice__(self, *args)
    def __delslice__(self, *args): return _HDF5Exporter.FunctionVector___delslice__(self, *args)
    def __delitem__(self, *args): return _HDF5Exporter.FunctionVector___delitem__(self, *args)
    def __getitem__(self, *args): return _HDF5Exporter.FunctionVector___getitem__(self, *args)
    def __setitem__(self, *args): return _HDF5Exporter.FunctionVector___setitem__(self, *args)
    def append(self, *args): return _HDF5Exporter.FunctionVector_append(self, *args)
    def empty(self): return _HDF5Exporter.FunctionVector_empty(self)
    def size(self): return _HDF5Exporter.FunctionVector_size(self)
    def clear(self): return _HDF5Exporter.FunctionVector_clear(self)
    def swap(self, *args): return _HDF5Exporter.FunctionVector_swap(self, *args)
    def get_allocator(self): return _HDF5Exporter.FunctionVector_get_allocator(self)
    def begin(self): return _HDF5Exporter.FunctionVector_begin(self)
    def end(self): return _HDF5Exporter.FunctionVector_end(self)
    def rbegin(self): return _HDF5Exporter.FunctionVector_rbegin(self)
    def rend(self): return _HDF5Exporter.FunctionVector_rend(self)
    def pop_back(self): return _HDF5Exporter.FunctionVector_pop_back(self)
    def erase(self, *args): return _HDF5Exporter.FunctionVector_erase(self, *args)
    def __init__(self, *args): 
        this = _HDF5Exporter.new_FunctionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _HDF5Exporter.FunctionVector_push_back(self, *args)
    def front(self): return _HDF5Exporter.FunctionVector_front(self)
    def back(self): return _HDF5Exporter.FunctionVector_back(self)
    def assign(self, *args): return _HDF5Exporter.FunctionVector_assign(self, *args)
    def resize(self, *args): return _HDF5Exporter.FunctionVector_resize(self, *args)
    def insert(self, *args): return _HDF5Exporter.FunctionVector_insert(self, *args)
    def reserve(self, *args): return _HDF5Exporter.FunctionVector_reserve(self, *args)
    def capacity(self): return _HDF5Exporter.FunctionVector_capacity(self)
    __swig_destroy__ = _HDF5Exporter.delete_FunctionVector
    __del__ = lambda self : None;
FunctionVector_swigregister = _HDF5Exporter.FunctionVector_swigregister
FunctionVector_swigregister(FunctionVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _HDF5Exporter.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _HDF5Exporter.StringVector___nonzero__(self)
    def __bool__(self): return _HDF5Exporter.StringVector___bool__(self)
    def __len__(self): return _HDF5Exporter.StringVector___len__(self)
    def pop(self): return _HDF5Exporter.StringVector_pop(self)
    def __getslice__(self, *args): return _HDF5Exporter.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _HDF5Exporter.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _HDF5Exporter.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _HDF5Exporter.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _HDF5Exporter.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _HDF5Exporter.StringVector___setitem__(self, *args)
    def append(self, *args): return _HDF5Exporter.StringVector_append(self, *args)
    def empty(self): return _HDF5Exporter.StringVector_empty(self)
    def size(self): return _HDF5Exporter.StringVector_size(self)
    def clear(self): return _HDF5Exporter.StringVector_clear(self)
    def swap(self, *args): return _HDF5Exporter.StringVector_swap(self, *args)
    def get_allocator(self): return _HDF5Exporter.StringVector_get_allocator(self)
    def begin(self): return _HDF5Exporter.StringVector_begin(self)
    def end(self): return _HDF5Exporter.StringVector_end(self)
    def rbegin(self): return _HDF5Exporter.StringVector_rbegin(self)
    def rend(self): return _HDF5Exporter.StringVector_rend(self)
    def pop_back(self): return _HDF5Exporter.StringVector_pop_back(self)
    def erase(self, *args): return _HDF5Exporter.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _HDF5Exporter.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _HDF5Exporter.StringVector_push_back(self, *args)
    def front(self): return _HDF5Exporter.StringVector_front(self)
    def back(self): return _HDF5Exporter.StringVector_back(self)
    def assign(self, *args): return _HDF5Exporter.StringVector_assign(self, *args)
    def resize(self, *args): return _HDF5Exporter.StringVector_resize(self, *args)
    def insert(self, *args): return _HDF5Exporter.StringVector_insert(self, *args)
    def reserve(self, *args): return _HDF5Exporter.StringVector_reserve(self, *args)
    def capacity(self): return _HDF5Exporter.StringVector_capacity(self)
    __swig_destroy__ = _HDF5Exporter.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _HDF5Exporter.StringVector_swigregister
StringVector_swigregister(StringVector)

class HDF5Exporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HDF5Exporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HDF5Exporter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HDF5Exporter.new_HDF5Exporter(*args)
        try: self.this.append(this)
        except: self.this = this
    def exportFunction(self, *args): return _HDF5Exporter.HDF5Exporter_exportFunction(self, *args)
    def exportSolution(self, *args): return _HDF5Exporter.HDF5Exporter_exportSolution(self, *args)
    __swig_destroy__ = _HDF5Exporter.delete_HDF5Exporter
    __del__ = lambda self : None;
HDF5Exporter_swigregister = _HDF5Exporter.HDF5Exporter_swigregister
HDF5Exporter_swigregister(HDF5Exporter)

# This file is compatible with both classic and new-style classes.


